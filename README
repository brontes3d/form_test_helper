FormTestHelper
==============
* Requires EdgeRails or the assert_select plugin.

This plugin uses +assert_select+ to verify and manipulate your forms.  It solves the problem we've 
all run into where you change the form but the test doesn't break because you're doing this in 
the test:
  post :create, :name => 'Pickaxe', :category => 1, :out_of_print => 0
  assert_response :success

Instead, work with the form directly!
  submit_form do |form|              # or select by dom_id or url if multiple forms on the page
    form['name'] = 'Pickaxe'
    form['category'].options         =>   [['Programming', '1'], ['Self-help', '2'], ...]
    form['category'] = "Programming" # Can set using the option label or the option value
    form['out_of_print'].check       # Check the checkbox
  end
  assert_response :success
  
...or simply:
  submit_form :name => 'Pickaxe', :category => 'Programming', :out_of_print => false
  
What's the benefit of this over post :create...?  It uses the action of the form, it verifies that the form and the fields you specify are present and not misspelled, and it preserves any hidden or default values that may be in the form.
  
Features:
  * Can select_form by dom_id or url, or call without arguments if there's only one form
  * Specifying a field name that doesn't exist raises an exception
  * Fields that are selects (dropdowns) won't let you set a value that's not in its options
  * Works with RESTful links and forms - :method => :put, :delete...
  * Checks for the presence of a submit button when you submit the form
  * Works in functional and integration tests
  * You can pass submit a hash and it will update the form accordingly.  Submitting a form with
    new values can be as simple as: 
      submit_form :username => 'bob', :password => 'opensesame'



Bigger example :: Merge in with above later:
$ ./script/console
>> irb app
>> get '/books/1;edit'
=> 200
>> form = select_form               # Verifies only 1 form on page and parses it
                                    # You can also select by id or action
=> <#FormTestHelper::Form...
>> form.field_names                 # What fields do we have in our little form?
=> ["commit", "book[title]", "book[category]", "book[rating]", "_method", "book[classic]"]
>> form['book[title]'].value
=> "Pickaxe"
>> form['book[category]'].value
=> "Mining"                         # Hmmm.  That can't be right.
>> form['book[category]'] = 'Ruby'
RuntimeError: Can't set value for book[category] that isn't one of the menu options.
>> form['book[category]'].options   # Okay, what are our options?
=> ["Programming", "Cooking", "Mining"]
>> form['book[category]'] = 'Programming'
=> "Programming"
>> form['book[rating]'] = "Excellent"
RuntimeError: Can't set value for book[rating] that isn't one of the radio buttons.
>> form['book[rating]'].options     # We're bad at this game.  What's valid?
=> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
>> form['book[rating]'] = '10'
=> "10"
>> form['book[classic]'].check      # Definitely one of the greats
=> "1"

>> form.action                      # Reflect: where will this form submit?
=> "/books/1"
>> form.request_method
=> :put

# TODO: Show form.submit and how all the params from the form are submitted (once the
bug with recycle! is fixed)